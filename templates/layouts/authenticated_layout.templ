package layouts

import (
    "meche/pkg/models"
    "github.com/markbates/goth"
)

func getProjectClass(projectID, currentProjectID string) string {
    if projectID == currentProjectID {
        return "bg-blue-50 text-blue-700"
    }
    return "text-gray-900 hover:bg-gray-100"
}

templ AuthenticatedLayout(user goth.User, organizations []*models.Organization, currentOrgID string, currentProjectID string, projects []*models.Project) {
    <!DOCTYPE html>
    <html lang="en">
        <head>
            <meta charset="UTF-8"/>
            <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
            <title>Meche</title>
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=DM+Sans:ital,opsz,wght@0,9..40,100..1000;1,9..40,100..1000&family=Space+Grotesk:wght@300..700&display=swap" rel="stylesheet">
            <script src="https://unpkg.com/htmx.org@1.9.10"></script>
            <script src="https://cdn.tailwindcss.com"></script>
            <script>
                tailwind.config = {
                        theme: {
                            extend: {
                                fontFamily: {
                                    sans: ['DM Sans', 'system-ui', 'sans-serif'],
                                    display: ['Space Grotesk', 'system-ui', 'sans-serif'],
                                },
                            },
                        },
                    }
            </script>
            <style>
                
                h1, h2, h3, h4, h5, h6 {
                    font-family: 'Space Grotesk', system-ui, sans-serif;
                }
                body {
                    font-family: 'DM Sans', system-ui, sans-serif;
                    -webkit-font-smoothing: antialiased;
                    -moz-osx-font-smoothing: grayscale;
                }
            </style>
        </head>
        <body class="bg-gray-50">
            <!-- Top Navigation -->
            <nav class="bg-white border-b border-gray-200 fixed w-full z-30">
                <div class="px-3 py-3 lg:px-5 lg:pl-3">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center">
                            if currentOrgID != "" {
                                <button id="toggleSidebar" class="inline-flex items-center p-2 text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200">
                                    <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clip-rule="evenodd"></path>
                                    </svg>
                                </button>
                            }
                            <div class="ml-3">
                                if len(organizations) == 0 {
                                    <button 
                                        hx-get="/organizations/new" 
                                        hx-target="#organization-form" 
                                        hx-swap="innerHTML" 
                                        class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                                    >
                                        Create Organization
                                    </button>
                                } else {
                                    <div class="relative">
                                        <button 
                                            type="button"
                                            onclick="toggleOrgDropdown()"
                                            class="flex items-center justify-between w-full bg-white border border-gray-200 text-gray-900 text-sm rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 p-2.5 pr-8 cursor-pointer hover:bg-gray-50 transition-all duration-200 shadow-sm"
                                        >
                                            <span id="selectedOrgName">
                                                if currentOrgID == "" {
                                                    Dashboard
                                                } else {
                                                    for _, org := range organizations {
                                                        if org.ID == currentOrgID {
                                                            { org.Name }
                                                        }
                                                    }
                                                }
                                            </span>
                                            <svg class="w-4 h-4 transition-transform duration-200" id="dropdownArrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                            </svg>
                                        </button>
                                        <div id="orgDropdown" class="hidden absolute z-50 w-full mt-1 bg-white border border-gray-200 rounded-lg shadow-lg overflow-hidden">
                                            <div class="py-1">
                                                <button 
                                                    onclick="selectOrganization('dashboard')"
                                                    class="w-full px-4 py-2 text-left text-sm hover:bg-gray-50 transition-colors duration-150 flex items-center"
                                                >
                                                    <span class="flex-1">Dashboard</span>
                                                    if currentOrgID == "" {
                                                        <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                        </svg>
                                                    }
                                                </button>
                                                for _, org := range organizations {
                                                    <button 
                                                        data-org-id={ org.ID }
                                                        class="org-select-btn w-full px-4 py-2 text-left text-sm hover:bg-gray-50 transition-colors duration-150 flex items-center"
                                                    >
                                                        <span class="flex-1">{ org.Name }</span>
                                                        if org.ID == currentOrgID {
                                                            <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                            </svg>
                                                        }
                                                    </button>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                    <script>
                                        function toggleOrgDropdown() {
                                            const dropdown = document.getElementById('orgDropdown');
                                            const arrow = document.getElementById('dropdownArrow');
                                            dropdown.classList.toggle('hidden');
                                            arrow.classList.toggle('rotate-180');
                                        }

                                        function selectOrganization(orgId) {
                                            const dropdown = document.getElementById('orgDropdown');
                                            const arrow = document.getElementById('dropdownArrow');
                                            const selectedName = document.getElementById('selectedOrgName');
                                            
                                            dropdown.classList.add('hidden');
                                            arrow.classList.remove('rotate-180');
                                            
                                            if (orgId === 'dashboard') {
                                                selectedName.textContent = 'Dashboard';
                                                window.location.href = '/dashboard';
                                            } else {
                                                const selectedOrg = document.querySelector(`[data-org-id="${orgId}"] span`);
                                                selectedName.textContent = selectedOrg.textContent;
                                                window.location.href = '/organizations/' + orgId;
                                            }
                                        }

                                        // Add click handlers to organization buttons
                                        document.addEventListener('DOMContentLoaded', function() {
                                            document.querySelectorAll('.org-select-btn').forEach(button => {
                                                button.addEventListener('click', function() {
                                                    const orgId = this.getAttribute('data-org-id');
                                                    selectOrganization(orgId);
                                                });
                                            });
                                        });

                                        // Close dropdown when clicking outside
                                        document.addEventListener('click', function(event) {
                                            const dropdown = document.getElementById('orgDropdown');
                                            const button = event.target.closest('button');
                                            if (!button || !button.closest('.relative')) {
                                                dropdown.classList.add('hidden');
                                                document.getElementById('dropdownArrow').classList.remove('rotate-180');
                                            }
                                        });
                                    </script>
                                }
                            </div>
                        </div>
                        <div class="flex items-center">
                            <div class="relative">
                                <button type="button" class="flex text-sm bg-gray-800 rounded-full focus:ring-4 focus:ring-gray-300">
                                    <span class="sr-only">Open user menu</span>
                                    <img class="w-8 h-8 rounded-full" src={ user.AvatarURL } alt="user photo"/>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </nav>

            <!-- Sidebar - Only shown when an organization is selected -->
            if currentOrgID != "" {
                <aside id="sidebar" class="fixed top-0 left-0 z-20 flex flex-col flex-shrink-0 w-64 h-full pt-16 font-normal transition-all duration-300 ease-in-out transform lg:flex" aria-label="Sidebar">
                    <div class="relative flex flex-col flex-1 min-h-0 pt-0 bg-white border-r border-gray-200">
                        <div class="flex flex-col flex-1 pt-5 pb-4 overflow-y-auto">
                            <div class="flex-1 px-3 space-y-1 bg-white divide-y divide-gray-200">
                                <ul class="pb-2 space-y-2">
                                    <li>
                                        <div class="flex justify-between items-center">
                                            <span class="text-sm font-semibold text-gray-500 uppercase">Projects</span>
                                            <button 
                                                hx-get={ "/organizations/" + currentOrgID + "/projects/new" }
                                                hx-target="#project-form"
                                                hx-swap="innerHTML"
                                                class="p-1 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full"
                                            >
                                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                                </svg>
                                            </button>
                                        </div>
                                        <ul class="mt-2 space-y-1">
                                            <!-- Pinned Projects -->
                                            for _, project := range projects {
                                                if project.ArchivedAt == nil && project.PinnedAt != nil {
                                                    <li>
                                                        <a 
                                                            href={ templ.SafeURL("/organizations/" + project.OrgID + "/projects/" + project.ID) }
                                                            class={ "flex items-center p-2 rounded-lg group " + getProjectClass(project.ID, currentProjectID) }
                                                        >
                                                            <svg class="w-4 h-4 mr-2 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                                                                <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
                                                            </svg>
                                                            <span class="ml-1">{ project.Name }</span>
                                                        </a>
                                                    </li>
                                                }
                                            }
                                            
                                            <!-- Divider -->
                                            <li class="border-t border-gray-200 my-2"></li>
                                            
                                            <!-- Unpinned Projects -->
                                            for _, project := range projects {
                                                if project.ArchivedAt == nil && project.PinnedAt == nil {
                                                    <li>
                                                        <a 
                                                            href={ templ.SafeURL("/organizations/" + project.OrgID + "/projects/" + project.ID) }
                                                            class={ "flex items-center p-2 rounded-lg group " + getProjectClass(project.ID, currentProjectID) }
                                                        >
                                                            <span class="ml-3">{ project.Name }</span>
                                                        </a>
                                                    </li>
                                                }
                                            }
                                        </ul>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </aside>
            }

            <!-- Main Content -->
            if currentOrgID != "" {
                <div id="main-content" class="p-4 sm:ml-64 pt-16 transition-all duration-300 ease-in-out">
                    <div class="rounded-lg mt-2">
                        { children... }
                    </div>
                </div>
            } else {
                <div class="p-4 pt-16">
                    <div class="rounded-lg mt-2">
                        { children... }
                    </div>
                </div>
            }

            if currentOrgID != "" {
                <script>
                    // Toggle sidebar with animation
                    document.getElementById('toggleSidebar').addEventListener('click', function() {
                        const sidebar = document.getElementById('sidebar');
                        const mainContent = document.getElementById('main-content');
                        
                        if (sidebar.classList.contains('-translate-x-full')) {
                            // Opening animation
                            sidebar.classList.remove('-translate-x-full');
                            mainContent.classList.remove('sm:ml-0');
                            mainContent.classList.add('sm:ml-64');
                        } else {
                            // Closing animation
                            sidebar.classList.add('-translate-x-full');
                            mainContent.classList.remove('sm:ml-64');
                            mainContent.classList.add('sm:ml-0');
                        }
                    });
                </script>
            }
        </body>
    </html>
} 