package pages

import (
	"meche/pkg/models"
	"time"
	"github.com/hako/durafmt"
)

func formatDueDate(dueAt *time.Time) string {
	if dueAt == nil {
		return ""
	}
	return dueAt.Format("2006-01-02T15:04")
}

func formatHumanReadableDueDate(dueAt *time.Time) string {
	if dueAt == nil {
		return ""
	}
	
	now := time.Now()
	diff := dueAt.Sub(now)

	if diff < 0 {
		absDiff := -diff
		return "Overdue by " + durafmt.Parse(absDiff).LimitFirstN(1).String()
	}
	return "Due in " + durafmt.Parse(diff).LimitFirstN(1).String()
}

templ TaskList(tasks []*models.Task, orgID string, projectID string) {
	<div id="task-list-container" class="mt-8">
		<div class="flex justify-between items-center mb-4">
			<h2 class="text-lg font-semibold text-gray-900">Tasks</h2>
			<button
				hx-get={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/new" }
				hx-target="#task-form"
				class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
			>
				New Task
			</button>
		</div>
		<div id="task-form"></div>
		if len(tasks) == 0 {
			<div class="text-center py-12">
				<svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
				</svg>
				<h3 class="mt-2 text-sm font-medium text-gray-900">No tasks</h3>
				<p class="mt-1 text-sm text-gray-500">Get started by creating a new task.</p>
			</div>
		} else {
			<ul role="list" class="divide-y divide-gray-200">
				for _, task := range tasks {
					<li class="py-4">
						<div class="flex items-center space-x-4">
							<div class="flex-1 min-w-0">
								<div class="flex items-center">
									if task.PinnedAt != nil {
										<svg class="h-5 w-5 text-yellow-400 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
											<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
										</svg>
									}
									<p class="text-sm font-medium text-gray-900 truncate">{ task.Name }</p>
								</div>
								<p class="text-sm text-gray-500 truncate">{ task.Description }</p>
								if task.DueAt != nil {
									<div class="flex items-center mt-1">
										<svg class="h-4 w-4 text-gray-400 mr-1" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
										</svg>
										<p class="text-sm text-gray-500">
											{ formatHumanReadableDueDate(task.DueAt) }
											<span class="text-gray-400 ml-1">({ task.DueAt.Format("Jan 02, 2006 15:04") })</span>
										</p>
									</div>
								}
							</div>
							<div class="flex-shrink-0 flex space-x-2">
								if task.PinnedAt == nil {
									<button
										type="button"
										hx-post={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID + "/pin" }
										hx-target="#task-list-container"
										hx-swap="outerHTML"
										class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
										</svg>
									</button>
								} else {
									<button
										type="button"
										hx-post={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID + "/unpin" }
										hx-target="#task-list-container"
										hx-swap="outerHTML"
										class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
										</svg>
									</button>
								}
								if task.ArchivedAt == nil {
									<button
										type="button"
										hx-post={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID + "/archive" }
										hx-target="#task-list-container"
										hx-swap="outerHTML"
										class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-yellow-600 hover:bg-yellow-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
										</svg>
									</button>
								} else {
									<button
										type="button"
										hx-post={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID + "/unarchive" }
										hx-target="#task-list-container"
										hx-swap="outerHTML"
										class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
										</svg>
									</button>
								}
								<button
									type="button"
									hx-get={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID + "/edit" }
									hx-target="#task-form"
									class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
								>
									<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
									</svg>
								</button>
								<button
									type="button"
									hx-delete={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/" + task.ID }
									hx-target="#task-list-container"
									hx-swap="outerHTML"
									class="inline-flex items-center p-1.5 border border-transparent rounded-full shadow-sm text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
								>
									<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
									</svg>
								</button>
							</div>
						</div>
					</li>
				}
			</ul>
		}
	</div>
}

templ TaskListWithEmptyForm(tasks []*models.Task, orgID string, projectID string) {
	<div id="task-list-container" class="space-y-4">
		<div class="flex justify-between items-center">
			<h2 class="text-lg font-semibold text-gray-900">Tasks</h2>
			<button
				hx-get={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/new" }
				hx-target="#task-form"
				class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
			>
				New Task
			</button>
		</div>
		<div id="task-form"></div>
		<div id="task-list" class="bg-white shadow overflow-hidden sm:rounded-md">
			if len(tasks) == 0 {
				<div class="px-4 py-5 sm:px-6 text-center text-gray-500">
					No tasks found. Create a new task to get started.
				</div>
			} else {
				<ul role="list" class="divide-y divide-gray-200">
					for _, task := range tasks {
						<li class="px-4 py-4 sm:px-6">
							<div class="flex items-center justify-between">
								<div class="flex items-center">
									if task.PinnedAt != nil {
										<svg class="h-5 w-5 text-yellow-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
											<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
										</svg>
									}
									<div class="ml-3">
										<p class="text-sm font-medium text-gray-900">{ task.Name }</p>
										if task.Description != "" {
											<p class="text-sm text-gray-500">{ task.Description }</p>
										}
									</div>
								</div>
								<div class="flex items-center space-x-2">
									if task.PinnedAt == nil {
										<button
											hx-post={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/pin" }
											hx-target="#task-list-container"
											class="text-gray-400 hover:text-yellow-500"
										>
											<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
												<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
											</svg>
										</button>
									} else {
										<button
											hx-post={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/unpin" }
											hx-target="#task-list-container"
											class="text-yellow-500 hover:text-gray-400"
										>
											<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
												<path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
											</svg>
										</button>
									}
									if task.ArchivedAt == nil {
										<button
											hx-post={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/archive" }
											hx-target="#task-list-container"
											class="text-gray-400 hover:text-gray-500"
										>
											<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
												<path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6z" clip-rule="evenodd" />
											</svg>
										</button>
									} else {
										<button
											hx-post={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/unarchive" }
											hx-target="#task-list-container"
											class="text-gray-500 hover:text-gray-400"
										>
											<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
												<path fill-rule="evenodd" d="M4 4a2 2 0 012-2h8a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V4zm2 0v12h8V4H6z" clip-rule="evenodd" />
											</svg>
										</button>
									}
									<button
										hx-get={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/edit" }
										hx-target="#task-form"
										class="text-gray-400 hover:text-indigo-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
											<path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
										</svg>
									</button>
									<button
										hx-delete={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID }
										hx-target="#task-list-container"
										hx-swap="outerHTML"
										class="text-gray-400 hover:text-red-500"
									>
										<svg class="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
											<path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
										</svg>
									</button>
								</div>
							</div>
						</li>
					}
				</ul>
			}
		</div>
	</div>
}

templ TaskDetails(task *models.Task) {
	<div class="bg-white shadow overflow-hidden sm:rounded-lg">
		<div class="px-4 py-5 sm:px-6">
			<h3 class="text-lg leading-6 font-medium text-gray-900">{ task.Name }</h3>
			<p class="mt-1 max-w-2xl text-sm text-gray-500">{ task.Description }</p>
		</div>
		<div class="border-t border-gray-200">
			<dl>
				<div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
					<dt class="text-sm font-medium text-gray-500">Created</dt>
					<dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{ task.CreatedAt.Format("2006-01-02 15:04:05") }</dd>
				</div>
				<div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
					<dt class="text-sm font-medium text-gray-500">Last updated</dt>
					<dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{ task.UpdatedAt.Format("2006-01-02 15:04:05") }</dd>
				</div>
				if task.ArchivedAt != nil {
					<div class="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
						<dt class="text-sm font-medium text-gray-500">Archived</dt>
						<dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{ task.ArchivedAt.Format("2006-01-02 15:04:05") }</dd>
					</div>
				}
				if task.PinnedAt != nil {
					<div class="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
						<dt class="text-sm font-medium text-gray-500">Pinned</dt>
						<dd class="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{ task.PinnedAt.Format("2006-01-02 15:04:05") }</dd>
					</div>
				}
			</dl>
		</div>
	</div>
}

templ TaskForm(orgID string, projectID string) {
	<div class="bg-white shadow sm:rounded-lg">
		<div class="px-4 py-5 sm:p-6">
			<h3 class="text-lg leading-6 font-medium text-gray-900">Create New Task</h3>
			<div class="mt-2 max-w-xl text-sm text-gray-500">
				<p>Fill in the details for your new task.</p>
			</div>
			<form
				hx-post={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks" }
				hx-target="#task-list-container"
				class="mt-5 space-y-4"
			>
				<div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
					<div>
						<label for="name" class="block text-sm font-medium text-gray-700">Name</label>
						<input
							type="text"
							name="name"
							id="name"
							class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
							placeholder="Task name"
							required
						/>
					</div>
					<div>
						<label for="due_at" class="block text-sm font-medium text-gray-700">Due Date</label>
						<input
							type="datetime-local"
							name="due_at"
							id="due_at"
							class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
						/>
					</div>
				</div>
				<div>
					<label for="description" class="block text-sm font-medium text-gray-700">Description</label>
					<textarea
						name="description"
						id="description"
						rows="3"
						class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
						placeholder="Task description"
						required
					></textarea>
				</div>
				<div class="flex justify-end space-x-3">
					<button
						type="button"
						hx-get={ "/organizations/" + orgID + "/projects/" + projectID + "/tasks/cancel" }
						hx-target="#task-form"
						class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					>
						Create
					</button>
				</div>
			</form>
		</div>
	</div>
}

templ EditTaskForm(task *models.Task) {
	<div id="task-form" class="bg-white shadow sm:rounded-lg">
		<div class="px-4 py-5 sm:p-6">
			<h3 class="text-lg leading-6 font-medium text-gray-900">Edit Task</h3>
			<div class="mt-2 max-w-xl text-sm text-gray-500">
				<p>Update the task details.</p>
			</div>
			<form
				hx-put={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID }
				hx-target="#task-list-container"
				hx-swap="outerHTML"
				class="mt-5 space-y-4"
			>
				<div class="grid grid-cols-1 gap-4 sm:grid-cols-2">
					<div>
						<label for="name" class="block text-sm font-medium text-gray-700">Name</label>
						<input
							type="text"
							name="name"
							id="name"
							value={ task.Name }
							class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
							placeholder="Task name"
							required
						/>
					</div>
					<div>
						<label for="due_at" class="block text-sm font-medium text-gray-700">Due Date</label>
						<input
							type="datetime-local"
							name="due_at"
							id="due_at"
							value={ formatDueDate(task.DueAt) }
							class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
						/>
					</div>
				</div>
				<div>
					<label for="description" class="block text-sm font-medium text-gray-700">Description</label>
					<textarea
						name="description"
						id="description"
						rows="3"
						class="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
						placeholder="Task description"
						required
					>{ task.Description }</textarea>
				</div>
				<div class="flex justify-end space-x-3">
					<button
						type="button"
						hx-get={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/cancel" }
						hx-target="#task-form"
						class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					>
						Cancel
					</button>
					<button
						type="submit"
						class="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					>
						Update
					</button>
				</div>
			</form>
		</div>
	</div>
}

templ ArchivedTasksList(tasks []*models.Task, orgID string, projectID string) {
	<div class="bg-white shadow overflow-hidden sm:rounded-lg">
		<div class="px-4 py-5 sm:px-6">
			<h3 class="text-lg leading-6 font-medium text-gray-900">Archived Tasks</h3>
			<p class="mt-1 max-w-2xl text-sm text-gray-500">Tasks that have been archived.</p>
		</div>
		<div class="border-t border-gray-200">
			if len(tasks) == 0 {
				<div class="px-4 py-5 sm:px-6 text-center text-gray-500">
					No archived tasks found.
				</div>
			} else {
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
							<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Archived At</th>
							<th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, task := range tasks {
							<tr>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{ task.Name }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ task.Description }</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{ task.ArchivedAt.Format("2006-01-02 15:04:05") }</td>
								<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
									<button
										hx-post={ "/organizations/" + task.OrgID + "/projects/" + task.ProjectID + "/tasks/" + task.ID + "/unarchive" }
										hx-target="#archived-tasks-container"
										hx-swap="outerHTML"
										class="text-indigo-600 hover:text-indigo-900"
									>
										Unarchive
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
} 